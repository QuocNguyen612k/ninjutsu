{"version":3,"sources":["utilities.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["labelMap","1","name","color","2","3","4","5","6","7","8","9","10","11","12","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","console","log","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","App","webcamRef","useRef","canvasRef","runCoco","a","tf","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","img","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","array","getContext","requestAnimationFrame","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d0be8bb.chunk.js","sourcesContent":["// Define our labelmap\nconst labelMap: any = {\n  1: { name: \"bird\", color: \"red\" },\n  2: { name: \"boar\", color: \"yellow\" },\n  3: { name: \"dog\", color: \"lime\" },\n  4: { name: \"dragon\", color: \"blue\" },\n  5: { name: \"hare\", color: \"purple\" },\n  6: { name: \"horse\", color: \"purple\" },\n  7: { name: \"monkey\", color: \"purple\" },\n  8: { name: \"ox\", color: \"purple\" },\n  9: { name: \"ram\", color: \"purple\" },\n  10: { name: \"rat\", color: \"purple\" },\n  11: { name: \"snake\", color: \"purple\" },\n  12: { name: \"tiger\", color: \"purple\" },\n};\n\n// Define a drawing function\nexport const drawRect = (\n  boxes: any,\n  classes: any,\n  scores: any,\n  threshold: any,\n  imgWidth: number,\n  imgHeight: number,\n  ctx: CanvasRenderingContext2D\n) => {\n  for (let i = 0; i <= boxes.length; i++) {\n    if (boxes[i] && classes[i] && scores[i] > 0.6) {\n      console.log(scores[i]);\n      // Extract variables\n      const [y, x, height, width] = boxes[i];\n      const text = classes[i];\n\n      // Set styling\n      ctx.strokeStyle = labelMap[text][\"color\"];\n      ctx.lineWidth = 10;\n      ctx.fillStyle = \"white\";\n      ctx.font = \"30px Arial\";\n\n      // DRAW!!\n      ctx.beginPath();\n      ctx.fillText(\n        labelMap[text][\"name\"] + \" - \" + Math.round(scores[i] * 100) / 100,\n        x * imgWidth,\n        y * imgHeight - 10\n      );\n      ctx.rect(\n        x * imgWidth,\n        y * imgHeight,\n        (width * imgWidth) / 2,\n        (height * imgHeight) / 1.5\n      );\n      ctx.stroke();\n      console.log(labelMap[text][\"name\"]);\n    }\n  }\n};\n","// Import dependencies\nimport { useRef } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawRect } from \"./utilities\";\n\nfunction App() {\n  const webcamRef = useRef<Webcam>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const runCoco = async () => {\n    const net = await tf.loadGraphModel(\n      \"https://tsjs-real-time-model.s3.jp-tok.cloud-object-storage.appdomain.cloud/undefinedmodel.json\"\n    );\n\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async (net: any) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video!.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video!.videoWidth;\n      const videoHeight = webcamRef.current.video!.videoHeight;\n\n      // Set video width\n      webcamRef.current.video!.width = videoWidth;\n      webcamRef.current.video!.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current!.width = videoWidth;\n      canvasRef.current!.height = videoHeight;\n\n      // 4. TODO - Make Detections\n      const img = tf.browser.fromPixels(video!);\n      const resized = tf.image.resizeBilinear(img, [640, 480]);\n      const casted = resized.cast(\"int32\");\n      const expanded = casted.expandDims(0);\n      const obj = await net.executeAsync(expanded);\n      console.log(obj);\n\n      const boxes = await obj[1].array();\n      const classes = await obj[2].array();\n      const scores = await obj[4].array();\n\n      canvasRef.current!.width = videoWidth;\n      canvasRef.current!.height = videoHeight;\n      // Draw mesh\n      const ctx = canvasRef.current!.getContext(\n        \"2d\"\n      ) as CanvasRenderingContext2D;\n\n      // 5. TODO - Update drawing utility\n      // drawSomething(obj, ctx)\n      requestAnimationFrame(() => {\n        drawRect(\n          boxes[0],\n          classes[0],\n          scores[0],\n          0.8,\n          videoWidth,\n          videoHeight,\n          ctx\n        );\n      });\n\n      tf.dispose(img);\n      tf.dispose(resized);\n      tf.dispose(casted);\n      tf.dispose(expanded);\n      tf.dispose(obj);\n    }\n  };\n\n  runCoco();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          muted={true}\n          style={{\n            //display: \"none\",\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zIndex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zIndex: 9,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}